pipeline {
    agent none

    stages {
        stage('GetCode') {
            agent { label 'master' }
            steps {
                sh "whoami"
                sh "hostname"
                git branch: 'develop', url: 'https://github.com/gcuauhtemoc/todo-list-aws'
                stash name: 'codigo', includes: '**'
            }
        }

        stage('StaticTest') {
            agent { label '01agente' }
            steps {
                sh "whoami"
                sh "hostname"
                unstash 'codigo'
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh '''
                        python3 -m flake8 --exit-zero --format=pylint src > flake8.out
                    '''
                    recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')],
                                 qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], 
                                                [threshold: 10, type: 'TOTAL', unstable: false]]

                    sh '''
                        python3 -m bandit --exit-zero -r src -f custom -o bandit.out --msg-template "{abspath}:{line}: {severity}: {test_id}: {msg}"
                    '''
                    recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')],
                                 qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], 
                                                [threshold: 4, type: 'TOTAL', unstable: false]]
                }
                stash name: 'static_reports', includes: 'flake8.out, bandit.out'
            }
        }

        stage('Deploy') {
            agent { label 'master' }
            steps {
                sh "whoami"
                sh "hostname"
                unstash 'codigo'
                sh 'sam build'
                sh 'sam deploy --config-env staging --no-confirm-changeset --no-fail-on-empty-changeset'
                script {
                    def baseUrl = sh(script: "aws cloudformation describe-stacks --stack-name todo-list-aws --query 'Stacks[0].Outputs[?OutputKey==`BaseUrlApi`].OutputValue' --output text", returnStdout: true).trim()
                    env.BASE_URL = baseUrl
                }
                stash name: 'deployed_code', includes: '**'
            }
        }

        stage('RestTest') {
            agent { label '02agente' }
            steps {
                sh "whoami"
                sh "hostname"
                unstash 'deployed_code'
                sh '''
                    python3 -m pytest --junitxml=result-test.xml test/integration/todoApiTest.py
                '''
                junit 'result-test.xml'
            }
        }
    }
}